{"version":3,"sources":["components/addCategory/AddCategory.js","components/appBar/AppHeader.js","components/giftGridItem/GiftGridItem.js","helpers/getGits.js","components/spinner/Spinner.js","components/giftGrid/GiftGrid.js","components/hooks/useFetchGifts.js","components/GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","console","log","trim","length","category","TextField","id","className","fullWidth","label","type","value","onChange","target","InputProps","startAdornment","InputAdornment","position","endAdornment","IconButton","onClick","withStyles","root","flexGrow","props","classes","AppBar","color","Toolbar","Typography","variant","useStyles","makeStyles","theme","icon","GiftGridItem","title","url","GridListTile","src","alt","GridListTileBar","actionIcon","getGifs","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","LinearProgress","display","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","gridList","transform","GiftGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","Spinner","GridList","cols","GifExpertApp","categories","AppHeader","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a14ec26e.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport propTypes from 'prop-types'\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport SearchIcon from '@material-ui/icons/Search';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\n\n\n\nexport const AddCategory = ({ setCategories }) => {\n    const [inputValue, setInputValue] = useState('')\n\n    const handleInput = (e) => {\n        setInputValue(e.target.value)\n\n    }\n    const handleclear = (e) => {\n        setInputValue('')\n\n    }\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        console.log('enviado');\n        if (inputValue.trim().length > 2) {\n            setCategories(category => [inputValue, ...category, ]);\n            setInputValue('')\n        }\n\n    }\n    return (\n        <form onSubmit={handleSubmit}>\n            <TextField\n                id=\"standard-basic\"\n                className=\" my-3 px-2\"\n                fullWidth\n                label=\"Busar\"\n                type=\"text\"\n                value={inputValue}\n                onChange={handleInput}\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                            <SearchIcon />\n                        </InputAdornment>\n                    ),\n                    endAdornment: (\n                      \n\n                        <InputAdornment position=\"end\">\n                            <IconButton\n                                aria-label=\"toggle password visibility\"\n                                onClick={handleclear }\n                            >\n                                <CloseIcon/>\n                            </IconButton>\n                        </InputAdornment>\n                    )\n                    \n                }}\n              \n            />\n\n            {/* <input\n                type=\"text\"\n                value={inputValue}\n                onChange={handleInput}\n            /> */}\n        </form>\n    )\n}\n// definor como obligatorios los props\nAddCategory.propTypes = {\n    setCategories: propTypes.func.isRequired\n}\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nconst styles = {\n    root: {\n        flexGrow: 1,\n    },\n};\n\nfunction SimpleAppBar(props) {\n    const { classes } = props;\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\" color=\"default\">\n                <Toolbar>\n                    <Typography variant=\"h6\" color=\"inherit\">\n                        GifExpertApp\n          </Typography>\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n}\n\nSimpleAppBar.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(SimpleAppBar);","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport IconButton from '@material-ui/core/IconButton';\nimport InfoIcon from '@material-ui/icons/Info';\nimport GridListTile from '@material-ui/core/GridListTile';\n\nconst useStyles = makeStyles((theme) => ({\n\n    icon: {\n        color: 'rgba(255, 255, 255, 0.54)',\n    },\n}));\n\nexport const GiftGridItem = ({id, title, url:{ url }}) => {\n        const classes = useStyles();\n\n    \n    return (\n        <GridListTile key={id}>\n        <img src={url} alt={title} />\n        <GridListTileBar\n          title={title}\n          actionIcon={\n            <IconButton aria-label={`info about ${title}`} className={classes.icon}>\n              <InfoIcon />\n            </IconButton>\n          }\n        />\n      </GridListTile>\n    )\n\n    //     <div className=\"col-2\">\n    //         <img src={url} alt={title} />\n    //         <p>{title}</p>\n            \n            \n    //     </div>\n    // )\n}\n","\nexport const getGifs = async ( category ) => {\n    const apiKey = 'sTxFy5PL8vVzH21aFAGCkzd871IAQfLN';\n    const url = 'https://api.giphy.com/v1/gifs/search?q=' + encodeURI(category) + '&limit=6&api_key=' + apiKey;\n\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium\n        }\n    })\n    console.log(gifs);\n    return gifs;\n\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nconst styles = {\n  root: {\n    flexGrow: 1,\n  },\n};\n\nfunction LinearQuery(props) {\n  const { classes } = props;\n  return (\n    <div className={classes.root}>\n      <LinearProgress variant=\"query\" />\n\n    </div>\n  );\n}\n\nLinearQuery.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(LinearQuery);","import React, { useEffect, useState } from 'react'\nimport { GiftGridItem } from '../giftGridItem/GiftGridItem';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport { useFetchGifs } from '../hooks/useFetchGifts';\nimport Spinner from '../spinner/Spinner';\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'space-around',\n        overflow: 'hidden',\n        backgroundColor: theme.palette.background.paper,\n    },\n    gridList: {\n        flexWrap: 'nowrap',\n        // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\n        transform: 'translateZ(0)',\n    },\n    icon: {\n        color: 'rgba(255, 255, 255, 0.54)',\n    },\n}));\n\n\nexport const GiftGrid = ({ category }) => {\n    const classes = useStyles();\n    \n    const { data, loading } = useFetchGifs(category)\n    console.log(data, loading);\n\n    return (\n        < >\n           \n            <h3> {  category}</h3>\n            { loading && <Spinner />}\n            <div className={classes.root}>\n                <GridList cols={2.5} className={classes.gridList}>\n                  \n                    {\n                        data.map((img) => (\n                            <GiftGridItem key={img.id} {...img} />\n                        ))\n                    }\n\n                \n                </GridList>\n\n            </div>\n\n\n\n        </>\n    )\n}\n","import { useState, useEffect } from 'react'\nimport { getGifs } from '../../helpers/getGits';\n\n\nexport const useFetchGifs = ( category ) => {\n    \n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n\n        getGifs( category )\n            .then( imgs => {\n                \n                setState({\n                    data: imgs,\n                    loading: false\n                });\n            })\n\n    }, [category])\n\n\n\n\n    return state; // { data:[], loading: true };\n\n\n}\n\n","import React, { useState } from 'react'\nimport { AddCategory } from './addCategory/AddCategory'\nimport AppHeader from './appBar/AppHeader'\nimport { GiftGrid } from './giftGrid/GiftGrid'\nexport const GifExpertApp = () => {\n    // const categories = ['One Puch', 'Samurai X', 'Dragon Ball']\n\n    const [categories, setCategories] = useState(['Dragon Ball Z'])\n\n    // const handleAdd = () => {\n    //     // setCategories([...categories, 'nueva'])\n    //     setCategories(category => [...category, 'nueva'])\n\n    // }\n    return (\n        <>\n          <AppHeader />\n            {/* <button onClick={handleAdd}>Agregar</button> */}\n            <AddCategory setCategories={setCategories}/>\n            <ol>\n                {\n                    categories.map((category) => \n                    <GiftGrid  key={category} category={category}/>\n                    )\n                }\n            </ol>\n\n        </>\n    )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './components/GifExpertApp';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}